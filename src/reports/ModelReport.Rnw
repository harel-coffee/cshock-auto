%This is a knitr template to print a single classification model from the pipeline
%
%The report will be a PDF, compiled from LaTeX that includes:
%
%- table containing the settings (settings_table)
%- figure with the classifcation model (model)
%
%The elements that are printed are build from functions in ReportFunctions.R
%
\documentclass[letter]{article}

%% Latex Formatting
\addtolength{\oddsidemargin}{-.975in}
\addtolength{\evensidemargin}{-.975in}
\addtolength{\textwidth}{1.95in}
\addtolength{\topmargin}{-1.00in}
\addtolength{\textheight}{1.75in}

%% Tex Packages
\usepackage[british]{babel}
\usepackage[scaled]{helvet}
\usepackage{amsmath}
\usepackage{hyperref}
\usepackage{tabularx}
\usepackage{comment}
\usepackage{array}
\usepackage{bigstrut}
\usepackage{subcaption}
\usepackage{booktabs}
\usepackage{verbatim}
\usepackage{fancyvrb}
\usepackage{placeins}
\usepackage{colortbl}
\usepackage{textcase}
\usepackage[]{moresize}
\usepackage{mathtools}

%Font Faces
\newcommand{\cell}[2]{\begin{tabular}{#1}#2\end{tabular}}
\newcommand{\bfcell}[2]{\setlength{\tabcolsep}{0pt}\textbf{\begin{tabular}{#1}#2\end{tabular}}}
\newcommand{\textds}[1]{\texttt{\footnotesize{#1}}}
\newcommand{\textfn}[1]{#1}
\newcommand{\textssm}[1]{\sf{#1}}

%Scoring System Models
\newcommand{\prow}[0]{\quad\mathrel{\raisebox{-0.75ex}{\dots}}}
\newcommand{\score}[0]{{\color{black}\textbf{SCORE}}}

%Colors for Scoring System Models
\definecolor{predcolor}{gray}{0.95}
\definecolor{scorecolor}{gray}{0.95}
\definecolor{riskcolor}{gray}{0.95}

%Commands for Scoring System Models
\newcommand{\modelfont}{\renewcommand*\familydefault{\sfdefault}\normalfont}
\newcommand{\instruction}[2]{{\color{white}\phantom{\textbf{add points from rows {#1} to {#2}}}}}
\newcommand{\scoringsystem}[0]{\footnotesize\centering\renewcommand{\arraystretch}{1.35}\modelfont{}}
\newcommand{\risktable}[0]{\par\vspace{0.5em}\footnotesize\centering\renewcommand{\arraystretch}{1.25}\modelfont{}}
\newcommand{\predcell}[2]{\par\vspace{0.5em}\renewcommand{\arraystretch}{1.5}\modelfont%
\begin{tabular}{|>{\columncolor{predcolor}}{#1}|}\hline\small{\textbf{#2}}\\\hline\end{tabular}}

\newcommand{\risklabel}[0]{{\color{black}\textbf{RISK}}}
\newcommand{\scorelabel}[0]{{\color{black}\textbf{SCORE}}}


%% R Packages
<<r_packages, results="hide",message=FALSE,echo=FALSE>>=
required_packages = c('dplyr', 'knitr', 'ggplot2', 'xtable', 'C50', 'Hmisc', 'formatR', 'gridExtra', 'rpart.plot', 'scales');
for (pkg in required_packages){
    suppressPackageStartupMessages(require(pkg, character.only = TRUE, warn.conflicts = FALSE, quietly = TRUE));
}
@


%% Knitr Options and Defaults
<<knitr_options,results="hide",message=FALSE,echo=FALSE>>=
set.if.missing = function(settings, field_name, default_value){
    if (!(field_name %in% names(settings))){
        settings[[field_name]] = default_value;
    }
    return(settings);
}

#report data defaults
report_data = set.if.missing(report_data, "title", NA);

report_data = set.if.missing(report_data, "settings_table", NA);
report_data = set.if.missing(report_data, "settings_table_caption", NA);
report_data = set.if.missing(report_data, "settings_table_label", "Table::SettingsTable");

report_data = set.if.missing(report_data, "stats_table", NA);
report_data = set.if.missing(report_data, "stats_table_caption", NA);
report_data = set.if.missing(report_data, "stats_table_label", "Table::StatsTable");

report_data = set.if.missing(report_data, "xtra_table", NA);
report_data = set.if.missing(report_data, "xtra_table_caption", NA);
report_data = set.if.missing(report_data, "xtra_table_label", "Table::StatsTable");

report_data = set.if.missing(report_data, "model", NA);
report_data = set.if.missing(report_data, "model_caption", NA);
report_data = set.if.missing(report_data, "model_label", "Table::ModelTable");
report_data = set.if.missing(report_data, "risk_table", NA);

print_title = !all(is.na(report_data$title));
print_model = !all(is.na(report_data$model));
print_risk_table = !all(is.na(report_data$risk_table));

print_settings_table = !all(is.na(report_data$settings_table));
print_settings_table_caption = !all(is.na(report_data$settings_table_caption));
print_settings_table_label = !all(is.na(report_data$settings_table_label));

print_stats_table = !all(is.na(report_data$stats_table));
print_stats_table_caption = !all(is.na(report_data$stats_table_caption));
print_stats_table_label = !all(is.na(report_data$stats_table_label));

print_xtra_table = !all(is.na(report_data$xtra_table));
print_xtra_table_caption = !all(is.na(report_data$xtra_table_caption));
print_xtra_table_label = !all(is.na(report_data$xtra_table_label));

LINEAR_METHODS = c("lars_lasso",
                   "lars_lasso_hc",
                   "lars_ridge",
                   "lars_elasticnet",
                   "logreg",
                   "ahrs_enet_none_logit",
                   "svm_linear");

SCORING_SYSTEM_METHODS = c("slim",
                           "risk_slim",
                           "mnrules",
                           "rounded_elasticnet",
                           "RSLP_DCD",
                           "RSLP_SR",
                           "RSLP_CR",
                           "RSLP_LR",
                           "RSLP_CRLR",
                           "RSLP_LRCR",
                           "RSLP_SRDCD",
                           "RSLP_CRDCD",
                           "RSLP_LRDCD",
                           "ahrs_fwd_unit_logit",
                           "ahrs_fwd_rnd_logit",
                           "ahrs_fwd_srnd_logit",
                           "ahrs_enet_unit_logit",
                           "ahrs_enet_rnd_logit",
                           "ahrs_enet_srnd_logit",
                           #
                           "risk_slim_platt",
                           "RSLP_SR_platt",
                           "RSLP_CR_platt",
                           "RSLP_LR_platt",
                           "RSLP_CRLR_platt",
                           "RSLP_LRCR_platt",
                           "RSLP_SRDCD_platt",
                           "RSLP_CRDCD_platt",
                           "RSLP_LRDCD_platt",
                           #
                           "ahrs_fwd_unit_platt",
                           "ahrs_fwd_rnd_platt",
                           "ahrs_fwd_srnd_platt",
                           "ahrs_enet_unit_platt",
                           "ahrs_enet_rnd_platt",
                           "ahrs_enet_srnd_platt");


opts_chunk$set(comment=NA,
               #fig.width=8,
               #fig.height=8,
               #fig.path=paste0("figure/",report_data$filename,"_",sep=""),
               results='asis',
               echo=FALSE,
               message=FALSE,
               warning=FALSE,
               dev="pdf");

@

\begin{document}
\pagenumbering{gobble}
%
<<print_title>>=
if (print_title) {
    cat(sprintf("\\section*{%s}\n",report_data$title));
}
@
%
%%REPORT_CONTENT_START
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%SETTINGS TABLE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<settings_table>>=
if (print_settings_table) {
    cat("\\begin{table}[htbp]\n")
    cat("\\flushleft\n")
    cat("\\scriptsize\n")
    #cat("\n\\renewcommand{\\arraystretch}{1.2})

    n_rows = nrow(report_data$settings_table);

    print.xtable(report_data$settings_table,
                 type = "latex",
                 floating = FALSE,
                 table.placement = "ht",
                 sanitize.text.function = function(str) gsub("_","\\_",str,fixed=TRUE),
                 sanitize.rownames.function = function(str) gsub("_","\\_",str,fixed=TRUE),
                 sanitize.colnames.function = function(str) gsub("_","\\_",str,fixed=TRUE),
                 include.rownames = TRUE,
                 include.colnames = FALSE,
                 tabular.environment = "tabular",
                 NA.string="-",
                 comment=FALSE,
                 timestamp=FALSE,
                 hline.after=NULL,
                 booktabs=TRUE,
                 add.to.row=list(pos=as.list(-1:n_rows),
                                 command=c('\\toprule ','',rep('\\midrule ',n_rows-1),'\\bottomrule\n')))

    if (print_settings_table_caption){
        cat(sprintf("\\caption{%s}\n",report_data$settings_table_caption))
    }

    if (print_settings_table_label){
        cat(sprintf("\\label{%s}\n",report_data$settings_table_label))
    }
    cat("\\end{table}\n")
}
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%STATS TABLE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<stats_table>>=

if (print_stats_table) {
    cat("\\begin{table}[htbp]\n")
    cat("\\flushleft\n")
    cat("\\scriptsize\n")
    #cat("\n\\renewcommand{\\arraystretch}{1.2})

    n_rows = nrow(report_data$stats_table);

    print.xtable(report_data$stats_table,
                 type = "latex",
                 floating = FALSE,
                 table.placement = "ht",
                 sanitize.text.function = function(str) gsub("_","\\_",str,fixed=TRUE),
                 sanitize.rownames.function = function(str) gsub("_","\\_",str,fixed=TRUE),
                 sanitize.colnames.function = function(str) gsub("_","\\_",str,fixed=TRUE),
                 include.rownames = FALSE,
                 include.colnames = TRUE,
                 tabular.environment = "tabular",
                 NA.string="-",
                 comment=FALSE,
                 timestamp=FALSE,
                 hline.after=0,
                 booktabs=TRUE,
                 add.to.row=list(pos=as.list(-1:n_rows),
                                 command=c('\\toprule ','',rep('\\midrule ',n_rows-1),'\\bottomrule\n')))

    if (print_stats_table_caption){
        cat(sprintf("\\caption{%s}\n",report_data$stats_table_caption))
    }

    if (print_stats_table_label){
        cat(sprintf("\\label{%s}\n",report_data$stats_table_label))
    }
    cat("\\end{table}\n")
}
@
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%EXTRA TABLE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<xtra_table>>=

if (print_xtra_table) {
    cat("\\begin{table}[htbp]\n")
    cat("\\flushleft\n")
    cat("\\scriptsize\n")
    #cat("\n\\renewcommand{\\arraystretch}{1.2})

    n_rows = nrow(report_data$xtra_table);

    print.xtable(report_data$xtra_table,
                 type = "latex",
                 floating = FALSE,
                 table.placement = "ht",
                 sanitize.text.function = function(str) gsub("_","\\_",str,fixed=TRUE),
                 sanitize.rownames.function = function(str) gsub("_","\\_",str,fixed=TRUE),
                 sanitize.colnames.function = function(str) gsub("_","\\_",str,fixed=TRUE),
                 include.rownames = FALSE,
                 include.colnames = TRUE,
                 tabular.environment = "tabular",
                 NA.string="-",
                 comment=FALSE,
                 timestamp=FALSE,
                 hline.after=0,
                 booktabs=TRUE,
                 add.to.row=list(pos=as.list(-1:n_rows),
                                 command=c('\\toprule ','',rep('\\midrule ',n_rows-1),'\\bottomrule\n')))

    if (print_xtra_table_caption){
        cat(sprintf("\\caption{%s}\n",report_data$xtra_table_caption))
    }

    if (print_xtra_table_label){
        cat(sprintf("\\label{%s}\n",report_data$xtra_table_label))
    }
    cat("\\end{table}\n")
}
@
%
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%MODEL
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<model>>=
if (print_model){

    if (report_data$method_name %in% c("c50_rule","c50_tree")) {
        #Print Model Summary
        cat("\n\\begin{verbatim}[htbp]")
        cat(report_data$model)
        cat("\n\\end{verbatim}")
    }

    if (report_data$method_name %in% c("cart")) {

        cat("\n\\begin{figure}[htbp]\n")
        cat("\\centering{\n")
        prp(report_data$model
            ,type=2
            , extra=104
            , nn=FALSE
            , fallen.leaves=TRUE
            , faclen=0
            , varlen=0
            , shadow.col="grey"
            , branch.lty=3
            , box.col=c("red", "green")[report_data$model$frame$yval]
        )
        cat("}\n\\end{figure}")
    }

    if (report_data$method_name %in% LINEAR_METHODS){

        #Print Model
        cat("\n\\begin{table}[htbp]\n")
        cat("\\centering{\n")
        print.xtable(report_data$model,
                     type = "latex",
                     floating = FALSE,
                     table.placement = "ht",
                     tabular.environment = "tabularx",
                     width = "\\textwidth",
                     sanitize.text.function = function(str) gsub("_","\\_",str,fixed=TRUE),
                     sanitize.rownames.function = function(str) gsub("_","\\_",str,fixed=TRUE),
                     sanitize.colnames.function = function(str) gsub("_","\\_",str,fixed=TRUE),
                     NA.string="",
                     size="\\scriptsize",
                     comment=FALSE,
                     timestamp=FALSE,
                     include.rownames=FALSE,
                     include.colnames=FALSE,
                     hline.after=NULL)

        if (print_risk_table){
            cat("\n\\vspace{0.5em}")
            print.xtable(report_data$risk_table$xtable,
                         type = "latex",
                         floating = FALSE,
                         table.placement = "htbp",
                         tabular.environment = "tabular",
                         sanitize.text.function = identity,
                         sanitize.rownames.function = function(str) gsub("_","\\_",str,fixed=TRUE),
                         sanitize.colnames.function = function(str) gsub("_","\\_",str,fixed=TRUE),
                         include.rownames = FALSE,
                         include.colnames = FALSE,
                         NA.string="",
                         hline.after=report_data$risk_table$hline_guide,
                         booktabs=FALSE,
                         comment=FALSE,
                         size=report_data$risk_table$size_command,
                         timestamp=FALSE)
        }
        cat("\n}\n\\end{table}")
    }

    if (report_data$method_name %in% SCORING_SYSTEM_METHODS){

        cat("\n\\begin{figure}[htbp]\n")
        cat("\\centering{\n")
        print.xtable(report_data$model$xtable,
                     type = "latex",
                     floating = FALSE,
                     table.placement = "htbp",
                     tabular.environment = "tabular",
                     sanitize.text.function = identity,
                     sanitize.rownames.function = function(str) gsub("_","\\_",str,fixed=TRUE),
                     sanitize.colnames.function = function(str) gsub("_","\\_",str,fixed=TRUE),
                     include.rownames = FALSE,
                     include.colnames = FALSE,
                     NA.string="",
                     hline.after=report_data$model$hline_guide,
                     booktabs=FALSE,
                     comment=FALSE,
                     timestamp=FALSE,
                     size=report_data$model$size_command)

        if (print_risk_table){
            cat("\n\\vspace{0.5em}")
            print.xtable(report_data$risk_table$xtable,
                         type = "latex",
                         floating = FALSE,
                         table.placement = "htbp",
                         tabular.environment = "tabular",
                         sanitize.text.function = identity,
                         sanitize.rownames.function = function(str) gsub("_","\\_",str,fixed=TRUE),
                         sanitize.colnames.function = function(str) gsub("_","\\_",str,fixed=TRUE),
                         include.rownames = FALSE,
                         include.colnames = FALSE,
                         NA.string="",
                         hline.after=report_data$risk_table$hline_guide,
                         booktabs=FALSE,
                         comment=FALSE,
                         size=report_data$risk_table$size_command,
                         timestamp=FALSE)
        }
        cat("\n}\n\\end{figure}")
    }
}
@
%%REPORT_CONTENT_END
\end{document}